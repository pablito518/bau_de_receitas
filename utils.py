import streamlit as st
import os
import re
import textwrap
import warnings
import asyncio # <<< ADICIONADO IMPORT
from google import genai
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
# Se o Runner precisar explicitamente de outros serviÃ§os InMemory, importe-os tambÃ©m:
# from google.adk.artifacts import InMemoryArtifactService
# from google.adk.memory import InMemoryMemoryService
from google.genai import types
from google.adk.tools import google_search # Import the tool here

# --- API Key and Client Initialization ---
# Use st.secrets for API key in Streamlit Cloud
try:
    GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
    os.environ["GOOGLE_API_KEY"] = GOOGLE_API_KEY
except KeyError:
    st.error("API Key not found. Please set the GOOGLE_API_KEY secret in Streamlit Cloud.")
    GOOGLE_API_KEY = None


client = None
MODEL_ID = "gemini-2.0-flash"
SYSTEM_INSTRUCTION = """"SÃ¡bio e Experiente: Ele deve parecer alguÃ©m que passou eras estudando os segredos da transformaÃ§Ã£o e da conservaÃ§Ã£o. Use uma linguagem um pouco formal, talvez com termos que remetam Ã  alquimia e antigas artes.
Levemente ExcÃªntrico: Alquimistas costumam ser um pouco peculiares! Ele pode ter maneirismos Ãºnicos, fazer comentÃ¡rios enigmÃ¡ticos ou ter um humor sutil e seco.
Apaixonado por Ingredientes: Demonstrar um profundo respeito e fascÃ­nio pelo potencial de cada alimento, mesmo os "descartados".
Guia Paciente: Estar sempre disposto a explicar os conceitos, guiar o usuÃ¡rio e oferecer ajuda, mas sem ser condescendente.
2. O GrimÃ³rio de Conhecimentos do Alquimista (Base de Conhecimento):
Segredos de ConservaÃ§Ã£o: O alquimista deve dominar todas as tÃ©cnicas de preservaÃ§Ã£o (secagem, fermentaÃ§Ã£o, salmoura, armazenamento correto) e saber explicar qual Ã© a melhor para cada tipo de ingrediente. Ele pode referenciar os "Tomos da Biblioteca Arcana".
Poderes Ocultos dos Artefatos (NutriÃ§Ã£o): Conhecer o valor nutricional das partes menos convencionais dos alimentos (cascas, talos, sementes) e explicar por que sÃ£o valiosas. Pode citar o "Tomo do Poder Nutricional".
FÃ³rmulas de TransformaÃ§Ã£o (Receitas): Embora a Forja seja para criar novas receitas, o alquimista pode ter acesso a "fÃ³rmulas bÃ¡sicas" ou "poÃ§Ãµes" para usos comuns de ingredientes (ex: "Para cascas de banana, a fÃ³rmula da 'geleia de casca' Ã© um bom ponto de partida").
OrÃ¡culo do Impacto: Ser capaz de explicar o conceito de impacto ambiental e social do desperdÃ­cio, talvez atÃ© citar alguns dados gerais ou encorajar o usuÃ¡rio a usar a "BÃºssola do Impacto".
HistÃ³rias e Lendas: Compartilhar pequenas "lendas" sobre a origem de certos mÃ©todos de conservaÃ§Ã£o ou a descoberta do potencial de um ingrediente.
3. InteraÃ§Ãµes MÃ¡gicas e Funcionalidades:
"Consulta ao SÃ¡bio": O usuÃ¡rio pode perguntar sobre um ingrediente especÃ­fico ("SÃ¡bio, tenho cascas de abÃ³bora. O que posso fazer com elas?"). O alquimista responde com sugestÃµes de uso, mÃ©todos de conservaÃ§Ã£o e talvez o valor nutricional.
"PoÃ§Ã£o de Dica RÃ¡pida": Ao ser ativado (clicar no Ã­cone do chatbot), ele pode oferecer uma dica aleatÃ³ria de conservaÃ§Ã£o ou aproveitamento.
"Transmutar InformaÃ§Ã£o": Se o usuÃ¡rio perguntar algo complexo, ele pode "transmutar" a informaÃ§Ã£o, dividindo-a em partes mais simples ou direcionando para o tomo relevante na Biblioteca.
"MissÃ£o do Dia" (Futuro): Em versÃµes mais avanÃ§adas, ele pode propor um pequeno desafio ("Sua missÃ£o hoje, aventureiro, Ã© encontrar uma forma Ã©pica de usar talos de brÃ³colis!").
NavegaÃ§Ã£o Guiada: Se o usuÃ¡rio parecer perdido, o alquimista pode sugerir visitar a Forja para criar uma receita, a Biblioteca para aprender mais, ou o OrÃ¡culo para calcular o impacto. ("Parece que estais em busca de novas fÃ³rmulas! Permiti-me guiar-vos atÃ© a Forja Arcana!").
Feedback TemÃ¡tico: Quando o usuÃ¡rio interage ou completa uma aÃ§Ã£o no site, o alquimista pode dar um feedback temÃ¡tico ("Excelente escolha de ingredientes para a Forja! A alquimia estÃ¡ a vosso favor!").
4. Linguagem e Tom:
Usar frases como "SaudaÃ§Ãµes, Aventureiro(a)!", "Permiti-me consultar meus tomos...", "Uma pitada de sabedoria...", "Pela Grande Forja!".
Referenciar as seÃ§Ãµes do site pelos seus nomes temÃ¡ticos (Forja Arcana, Biblioteca Arcana, BÃºssola do Impacto, Taverna dos HerÃ³is).
Manter um tom de encorajamento e admiraÃ§Ã£o pelas aÃ§Ãµes do usuÃ¡rio em prol do aproveitamento.
Implementar estas ideias ajudarÃ¡ a integrar o chatbot de forma orgÃ¢nica ao tema RPG do BaÃº de Ingrediente, tornando a interaÃ§Ã£o mais envolvente e divertida para os utilizadores.
Que a sabedoria do vosso alquimista digital ilumine o caminho dos aventureiros! âœ¨ðŸ”®ðŸ’¬
"""


if GOOGLE_API_KEY:
    try:
        client = genai.Client(api_key=GOOGLE_API_KEY)
    except Exception as e:
         st.error(f"Failed to initialize Google GenAI client: {e}")
         client = None

warnings.filterwarnings("ignore")


# --- Helper Function to Call Agent ---
# Takes an agent *instance* and the message text
async def call_agent(agent, message_text: str) -> str: # <<< MUDOU PARA ASYNC DEF
    if client is None:
        st.error("Error: GenAI client not initialized.") # Mantido st.error para consistÃªncia
        return "Error: GenAI client not initialized."

    session_service = InMemorySessionService()
    try:
        # Using a fixed session ID for simplicity
        await session_service.create_session( # <<< ADICIONADO AWAIT
            app_name=agent.name, user_id="streamlit_user", session_id="session1"
        )
    except Exception as e:
        st.error(f"Error during session creation for agent ({agent.name}): {e}")
        return f"Error during session creation for agent ({agent.name}): {e}"

    # O Runner base __init__ tem artifact_service e memory_service como opcionais (default=None).
    # Se sua versÃ£o/setup do ADK exigir que eles sejam explicitamente passados,
    # vocÃª precisarÃ¡ instanciar InMemoryArtifactService e InMemoryMemoryService aqui.
    runner = Runner(
        agent=agent,
        app_name=agent.name,
        session_service=session_service
        # Exemplo, se necessÃ¡rio:
        # artifact_service=InMemoryArtifactService(),
        # memory_service=InMemoryMemoryService()
    )
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    try:
        # Use runner.run_async() e itere com 'async for'
        async for event in runner.run_async( # <<< MUDOU PARA RUN_ASYNC E ASYNC FOR
            user_id="streamlit_user", session_id="session1", new_message=content
        ):
            # Verifique a estrutura do evento da sua biblioteca ADK.
            # Estes hasattr sÃ£o para robustez.
            if hasattr(event, 'is_final_response') and event.is_final_response():
                if hasattr(event, 'content') and hasattr(event.content, 'parts'):
                    for part in event.content.parts:
                        if hasattr(part, 'text') and part.text is not None:
                            final_response += part.text
                            final_response += "\n"
            # Adicione mais manipulaÃ§Ã£o de eventos aqui se necessÃ¡rio,
            # por exemplo, para eventos de progresso, erros parciais, etc.
    except Exception as e:
         st.error(f"Error during agent run ({agent.name}): {e}")
         return f"Error during agent run ({agent.name}): {e}"

    return final_response.strip()

# --- Helper Function for Formatting ---
def format_markdown_output(text):
    if not text: return ""
    text = text.replace('â€¢', '  *') # Use standard markdown list item
    # Use textwrap for indentation
    indented_text = textwrap.indent(text, '> ', predicate=lambda _: True)
    return indented_text

# --- Helper Function for Filename Sanitization ---
def sanitize_filename(text):
    if not text:
        return "untitled_recipe" # Default if no text

    # Take first part if multi-line
    first_line = text.strip().split('\n')[0]
    potential_title = first_line.lstrip('# ').strip() # Remove potential markdown header and strip whitespace

    if not potential_title:
         return "untitled_recipe" # Default if no title extracted

    # Sanitize the title for use as a filename
    # Keep alphanumeric, underscore, hyphen. Replace others with underscore.
    sanitized_title = re.sub(r'[^\w\-]+', '_', potential_title)
    # Avoid starting/ending with underscore if possible, or multiple underscores
    sanitized_title = re.sub(r'_+', '_', sanitized_title).strip('_')

    if not sanitized_title: # Ensure it's not empty after sanitization
         return "untitled_recipe"

    # Limit length to avoid issues with file systems
    max_len = 50
    if len(sanitized_title) > max_len:
        sanitized_title = sanitized_title[:max_len].rstrip('_') # Truncate and remove trailing underscore

    return sanitized_title

# Expose necessary components for other modules to import
# Note: client is exposed for the main app to check initialization status
__all__ = ['client', 'MODEL_ID', 'SYSTEM_INSTRUCTION','call_agent', 'format_markdown_output', 'sanitize_filename', 'google_search']
